
// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for generating tailored interview questions based on a candidate's CV, role, and expertise.
 *
 * - interviewQuestionGenerator - A function that takes candidate information and generates interview questions.
 * - InterviewQuestionGeneratorInput - The input type for the interviewQuestionGenerator function.
 * - InterviewQuestionGeneratorOutput - The return type for the interviewQuestionGenerator function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const InterviewQuestionGeneratorInputSchema = z.object({
  professionalHeadline: z.string().describe("The candidate's professional headline."),
  professionalSummary: z.string().describe("The candidate's professional summary."),
  cvSkills: z.array(z.string()).optional().describe("A list of skills extracted from the candidate's CV."),
  cvExperienceSummary: z.string().optional().describe("A summary of the candidate's work experience from their CV."),
  candidateRole: z.string().describe('The role the candidate is applying for (can be derived from headline or a specific job).'),
});
export type InterviewQuestionGeneratorInput = z.infer<
  typeof InterviewQuestionGeneratorInputSchema
>;

const InterviewQuestionGeneratorOutputSchema = z.object({
  behaviouralQuestions: z
    .array(z.string())
    .describe('A list of 3-4 behavioural interview questions.'),
  situationalQuestions: z
    .array(z.string())
    .describe('A list of 3-4 situational interview questions.'),
  technicalQuestions: z
    .array(z.string())
    .describe('A list of 3-4 technical interview questions relevant to the profile and role.'),
});
export type InterviewQuestionGeneratorOutput = z.infer<
  typeof InterviewQuestionGeneratorOutputSchema
>;

export async function interviewQuestionGenerator(
  input: InterviewQuestionGeneratorInput
): Promise<InterviewQuestionGeneratorOutput> {
  return interviewQuestionGeneratorFlow(input);
}

const interviewQuestionGeneratorPrompt = ai.definePrompt({
  name: 'interviewQuestionGeneratorPrompt',
  input: {schema: InterviewQuestionGeneratorInputSchema},
  output: {schema: InterviewQuestionGeneratorOutputSchema},
  prompt: `You are an AI Interview Conductor, skilled at generating tailored interview questions for candidates.

  Based on the following candidate information, generate a set of 3-4 behavioural, 3-4 situational, and 3-4 technical interview questions.
  Ensure the questions are highly relevant to the candidate's background and the role they are targeting.

  Candidate Role: {{{candidateRole}}}
  Professional Headline: {{{professionalHeadline}}}
  Professional Summary: {{{professionalSummary}}}
  {{#if cvSkills}}
  CV Skills: {{#each cvSkills}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  {{/if}}
  {{#if cvExperienceSummary}}
  CV Experience Summary: {{{cvExperienceSummary}}}
  {{/if}}

  Output the questions in the following JSON format:
  {
    "behaviouralQuestions": ["question 1", "question 2", "question 3", "question 4 (optional)"],
    "situationalQuestions": ["question 1", "question 2", "question 3", "question 4 (optional)"],
    "technicalQuestions": ["question 1", "question 2", "question 3", "question 4 (optional)"]
  }`,
});

const interviewQuestionGeneratorFlow = ai.defineFlow(
  {
    name: 'interviewQuestionGeneratorFlow',
    inputSchema: InterviewQuestionGeneratorInputSchema,
    outputSchema: InterviewQuestionGeneratorOutputSchema,
  },
  async (input: InterviewQuestionGeneratorInput): Promise<InterviewQuestionGeneratorOutput> => {
    console.log('[InterviewQuestionGeneratorFlow] Received input:', JSON.stringify(input, null, 2));
    
    let output: InterviewQuestionGeneratorOutput | null = null;
    try {
      const result = await interviewQuestionGeneratorPrompt(input);
      output = result.output; // Genkit v1.x uses .output
      console.log('[InterviewQuestionGeneratorFlow] Raw AI output:', JSON.stringify(output, null, 2));
    } catch (error) {
      console.error('[InterviewQuestionGeneratorFlow] Error calling interviewQuestionGeneratorPrompt:', error);
      throw new Error(`Failed to execute AI prompt for question generation: ${error instanceof Error ? error.message : String(error)}`);
    }

    if (!output) {
      console.error('[InterviewQuestionGeneratorFlow] AI output was null or did not match schema.');
      throw new Error('AI failed to generate questions or the output did not match the schema.');
    }
    
    // Ensure each category has at least 3 and at most 4 questions
    const validatedOutput: InterviewQuestionGeneratorOutput = {
        behaviouralQuestions: (output.behaviouralQuestions || []).slice(0,4),
        situationalQuestions: (output.situationalQuestions || []).slice(0,4),
        technicalQuestions: (output.technicalQuestions || []).slice(0,4),
    };

    // Add default questions if any category has less than 3
    if (validatedOutput.behaviouralQuestions.length < 3) {
      const defaults = ["Describe a challenging project and how you handled it.", "Tell me about a time you had to work with a difficult team member.", "How do you prioritize your work when faced with multiple deadlines?"];
      validatedOutput.behaviouralQuestions.push(...defaults.slice(0, 3 - validatedOutput.behaviouralQuestions.length));
    }
    if (validatedOutput.situationalQuestions.length < 3) {
      const defaults = ["Imagine a critical bug is found in production right before a major release. What steps would you take?", "What would you do if you disagreed with a decision made by your manager?", "How would you handle a situation where a client is unhappy with your work?"];
      validatedOutput.situationalQuestions.push(...defaults.slice(0, 3 - validatedOutput.situationalQuestions.length));
    }
    if (validatedOutput.technicalQuestions.length < 3) {
      const roleSpecificTechField = input.candidateRole.toLowerCase().includes('software') ? 'object-oriented programming' : 'your primary technical field';
      const defaults = [
        `What are the core principles of ${roleSpecificTechField}?`,
        `Describe your experience with a key technology from your CV/profile like 'cloud platforms' or 'data analysis tools'.`,
        `How do you stay updated with new technologies and trends in your field?`
      ];
      validatedOutput.technicalQuestions.push(...defaults.slice(0, 3 - validatedOutput.technicalQuestions.length));
    }
    console.log('[InterviewQuestionGeneratorFlow] Validated output:', JSON.stringify(validatedOutput, null, 2));
    return validatedOutput;
  }
);

